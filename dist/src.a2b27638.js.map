{"version":3,"sources":["src/index.js"],"names":["holes","document","querySelectorAll","moles","startButton","querySelector","score","timerDisplay","time","timer","lastHole","points","difficulty","randomInteger","min","max","Math","floor","random","setDelay","delay","chooseHole","indexOfHole","hole","gameOver","timeoutId","showUp","gameStopped","stopGame","showAndHide","toggleVisibility","timeoutID","setTimeout","classList","toggle","updateScore","textContent","clearScore","updateTimer","startTimer","setInterval","whack","event","setEventListeners","forEach","mole","addEventListener","setDuration","duration","clearInterval","startGame","window"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["\nconst holes = document.querySelectorAll('.hole');\nconst moles = document.querySelectorAll('.mole');\nconst startButton = document.querySelector('#start');\nconst score = document.querySelector('#score');\nconst timerDisplay = document.querySelector('#timer');\n\n\n\n\nlet time = 0;\nlet timer;\nlet lastHole = 0;\nlet points = 0;\nlet difficulty = \"easy\";\n\n/**\n * Generates a random integer within a range.\n *\n * The function takes two values as parameters that limits the range \n * of the number to be generated. For example, calling randomInteger(0,10)\n * will return a random integer between 0 and 10. Calling randomInteger(10,200)\n * will return a random integer between 10 and 200.\n *\n */\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Sets the time delay given a difficulty parameter.\n *\n * The function takes a `difficulty` parameter that can have three values: `easy`\n * `normal` or `hard`. If difficulty is \"easy\" then the function returns a time delay\n * of 1500 milliseconds (or 1.5 seconds). If the difficulty is set to \"normal\" it should\n * return 1000. If difficulty is set to \"hard\" it should return a randomInteger between\n * 600 and 1200.\n *\n * Example: \n * setDelay(\"easy\") //> returns 1500\n * setDelay(\"normal\") //> returns 1000\n * setDelay(\"hard\") //> returns 856 (returns a random number between 600 and 1200).\n *\n */\nfunction setDelay(difficulty) {\n  // TODO: Write your code here.\n  let delay;\n  if(difficulty === \"easy\"){\n    delay = 1500;\n    \n  } \n  if (difficulty === \"normal\"){\n    delay = 1000;\n\n  } \n  if (difficulty === \"hard\"){\n    delay = randomInteger(600,1200)\n  }\n  return delay;\n}\n\n/**\n * Chooses a random hole from a list of holes.\n *\n * This function should select a random Hole from the list of holes.\n * 1. generate a random integer from 0 to 8 and assign it to an index variable\n * 2. get a random hole with the random index (e.g. const hole = holes[index])\n * 3. if hole === lastHole then call chooseHole(holes) again.\n * 4. if hole is not the same as the lastHole then keep track of \n * it (lastHole = hole) and return the hole\n *\n * Example: \n * const holes = document.querySelectorAll('.hole');\n * chooseHole(holes) //> returns one of the 9 holes that you defined\n */\nfunction chooseHole(holes) {\n  // TODO: Write your code here.\n  // 1. Generate a random integer from 0 to 8 and assign it to an index variable.\n  let indexOfHole = randomInteger(0,8);\n  // 2. Get a random hole with the random index (e.g., const hole = holes[index]).\n  let hole = holes[indexOfHole];\n  // 3. if hole === lastHole, then call chooseHole(holes) again because you don't want to return the same hole.\n  if (hole === lastHole) {\n    return chooseHole(holes);\n  }\n  // 4. if hole is not the same as the lastHole, then keep track of it (lastHole = hole) and return the hole.\n  lastHole = hole;\n  return hole;\n}\n\n/**\n*\n* Calls the showUp function if time > 0 and stops the game if time = 0.\n*\n* The purpose of this function is simply to determine if the game should\n* continue or stop. The game continues if there is still time `if(time > 0)`.\n* If there is still time then `showUp()` needs to be called again so that\n* it sets a different delay and a different hole. If there is no more time\n* then it should call the `stopGame()` function. The function also needs to\n* return the timeoutId if the game continues or the string \"game stopped\"\n* if the game is over.\n*\n*  // if time > 0:\n*  //   timeoutId = showUp()\n*  //   return timeoutId\n*  // else\n*  //   gameStopped = stopGame()\n*  //   return gameStopped\n*\n*/\nfunction gameOver() {\n  if(time > 0){\n    let timeoutId = showUp();\n    return timeoutId;\n  } else {\n    let gameStopped = stopGame();\n    return gameStopped;\n  }\n}\n\n/**\n*\n* Calls the showAndHide() function with a specific delay and a hole.\n*\n* This function simply calls the `showAndHide` function with a specific\n* delay and hole. The function needs to call `setDelay()` and `chooseHole()`\n* to call `showAndHide(hole, delay)`.\n*\n*/\nfunction showUp() {\n  let delay = setDelay(difficulty); \n  const hole = chooseHole(holes);  \n  return showAndHide(hole, delay);\n}\n\n/**\n*\n* The purpose of this function is to show and hide the mole given\n* a delay time and the hole where the mole is hidden. The function calls\n* `toggleVisibility` to show or hide the mole. The function should return\n* the timeoutID\n*\n*/\nfunction showAndHide(hole, delay){\n  toggleVisibility(hole);\n  // TODO: call the toggleVisibility function so that it adds the 'show' class.\n\n  const timeoutID = setTimeout(() => {\n    toggleVisibility(hole);\n    // TODO: call the toggleVisibility function so that it removes the 'show' class when the timer times out.\n\n    gameOver();\n  }, delay);\n  // TODO: change the setTimeout delay to the one provided as a parameter\n  return timeoutID;\n}\n\n/**\n*\n* Adds or removes the 'show' class that is defined in styles.css to \n* a given hole. It returns the hole.\n*\n*/\nfunction toggleVisibility(hole){\n  hole.classList.toggle('show');\n  // TODO: add hole.classList.toggle so that it adds or removes the 'show' class.\n\n  return hole;\n}\n\n/**\n*\n* This function increments the points global variable and updates the scoreboard.\n* Use the `points` global variable that is already defined and increment it by 1.\n* After the `points` variable is incremented proceed by updating the scoreboard\n* that you defined in the `index.html` file. To update the scoreboard you can use \n* `score.textContent = points;`. Use the comments in the function as a guide \n* for your implementation:\n*\n*/\nfunction updateScore() {\n  points++;\n  score.textContent = points;\n  // TODO: Write your code here\n\n  return points;\n}\n\n/**\n*\n* This function clears the score by setting `points = 0`. It also updates\n* the board using `score.textContent = points`. The function should return\n* the points.\n*\n*/\nfunction clearScore() {\n  points = 0;\n  score.textContent = points;\n  // TODO: Write your code here\n\n  return points;\n}\n\n/**\n*\n* Updates the control board with the timer if time > 0\n*\n*/\nfunction updateTimer() {\n  // TODO: Write your code here.\n  // hint: this code is provided to you in the instructions.\n  \n  if (time > 0){\n    time -= 1;\n    timerDisplay.textContent = time;\n  }\n  return time;\n}\n\n/**\n*\n* Starts the timer using setInterval. For each 1000ms (1 second)\n* the updateTimer function get called. This function is already implemented\n*\n*/\nfunction startTimer() {\n  // TODO: Write your code here\n  timer = setInterval(updateTimer, 1000);\n  return timer;\n}\n\n/**\n*\n* This is the event handler that gets called when a player\n* clicks on a mole. The setEventListeners should use this event\n* handler (e.g. mole.addEventListener('click', whack)) for each of\n* the moles.\n*\n*/\nfunction whack(event) {\n  // playAudio(audioHit);  // optional\n  updateScore();\n  // TODO: Write your code here.\n  // call updateScore()\n  return points;\n}\n\n\n/**\n*\n* Adds the 'click' event listeners to the moles. See the instructions\n* for an example on how to set event listeners using a for loop.\n*/\nfunction setEventListeners(){\n  // TODO: Write your code here\n  \n  // forEach mole add the whack event handler when a player clicks on the mole.\n  moles.forEach(\n    mole => mole.addEventListener('click', whack)\n  );\n  // return moles;\n  return moles;\n  \n}\n\n/**\n*\n* This function sets the duration of the game. The time limit, in seconds,\n* that a player has to click on the sprites.\n*\n*/\nfunction setDuration(duration) {\n  time = duration;\n  return time;\n}\n\n/**\n*\n* This function is called when the game is stopped. It clears the\n* timer using clearInterval. Returns \"game stopped\".\n*\n*/\nfunction stopGame(){\n  // stopAudio(song);  //optional\n  clearInterval(timer);\n  return \"game stopped\";\n}\n\n/**\n*\n* This is the function that starts the game when the `startButton`\n* is clicked.\n*\n*/\nfunction startGame(){\n  setDuration(60);\n  clearScore();\n  setEventListeners();\n  startTimer();\n  showUp();\n  return \"game started\";\n}\n\nstartButton.addEventListener(\"click\", startGame);\n\n\n// Please do not modify the code below.\n// Used for testing purposes.\nwindow.randomInteger = randomInteger;\nwindow.chooseHole = chooseHole;\nwindow.setDelay = setDelay;\nwindow.startGame = startGame;\nwindow.gameOver = gameOver;\nwindow.showUp = showUp;\nwindow.holes = holes;\nwindow.moles = moles;\nwindow.showAndHide = showAndHide;\nwindow.points = points;\nwindow.updateScore = updateScore;\nwindow.clearScore = clearScore;\nwindow.whack = whack;\nwindow.time = time;\nwindow.setDuration = setDuration;\nwindow.toggleVisibility = toggleVisibility;\nwindow.setEventListeners = setEventListeners;\n"]}